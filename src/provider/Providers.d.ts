import MaiarAppStrategy from './maiar-app/MaiarAppStrategy';
import LedgerStrategy from './ledger/LedgerStrategy';
import WebWalletStrategy from './web/WebWalletStrategy';
import { Address, ProxyProvider, ApiProvider, Transaction } from "@elrondnetwork/erdjs";
import { ProviderOption } from "./config";
import IProviderStrategyEventHandler from "./IProviderStrategyEventHandler";
import IProviderStrategy from "./IProviderStrategy";
import DefiWallet from "./defi/DefiWalletStrategy";
declare class Providers implements IProviderStrategyEventHandler {
    currentStrategy?: IProviderStrategy;
    private onLogin;
    private onLogout;
    private _maiarApp;
    private _ledger;
    private _webWallet;
    private _defiWallet;
    private initialised;
    private _proxy;
    private _api;
    constructor(proxy: ProxyProvider, api: ApiProvider, options: ProviderOption, onLogin: Function, onLogout: Function);
    init(): Promise<void>;
    get currentProvider(): import("@elrondnetwork/erdjs").IDappProvider | undefined;
    get ledger(): LedgerStrategy;
    get maiarApp(): MaiarAppStrategy;
    get webWallet(): WebWalletStrategy;
    get defiWallet(): DefiWallet;
    get proxy(): ProxyProvider;
    logout(): void;
    sendAndWatch(transaction: Transaction): Promise<import("@elrondnetwork/erdjs/out/transactionOnNetwork").TransactionOnNetwork>;
    signAndSend(transaction: Transaction): Promise<Transaction>;
    transactionResult(transaction: Transaction): Promise<import("@elrondnetwork/erdjs/out/transactionOnNetwork").TransactionOnNetwork>;
    handleLoginStart(provider: IProviderStrategy): void;
    handleLogin(provider: IProviderStrategy, address: Address): void;
    handleLoginError(provider: IProviderStrategy, err: Error): void;
    handleLogout(provider: IProviderStrategy): void;
}
export default Providers;
